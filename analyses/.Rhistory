#Charger datesponte
library("readxl")
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
setwd('/Users/christopherouleau-desrochers/Documents/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/meteo/collecte_meteo/ROUYNA')
datesponte<-read_excel('/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/datesponte.xlsx')
View(datesponte)
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
View(datesponte)
as.numeric(sub(',','.', sub('.','', datesponte$y, fixed=TRUE), fixed=TRUE))
View(datesponte)
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
as.numeric(sub(',','.', sub('.','', datesponte$y, fixed=TRUE), fixed=TRUE))
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
View(coordinates_pileated)
###Nouveau excel avec seulement années, coordonnées et codes
install.packages("writexl")
library('writexl')
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
###Changement année/mois/jour en année
coordinates_pileated$year=format(coordinates_pileated$DatePonte, format="%Y" )
###Nouveau fichier avec seulement année
coordinates_pileated_v2<-subset(coordinates_pileated, select=-c(DatePonte))
write_xlsx(coordinates_pileated_v2,"/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/coordinates_pileated.xlsx")
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.'.'', datesponte$x, fixed=TRUE), fixed=TRUE))
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.'.'', datesponte$x, fixed=TRUE), fixed=TRUE))
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub(','.'', datesponte$x, fixed=TRUE), fixed=TRUE))
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
View(datesponte)
as.numeric(sub(',','.', sub('.','', datesponte$y, fixed=TRUE), fixed=TRUE))
View(datesponte)
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
###Changement année/mois/jour en année
coordinates_pileated$year=format(coordinates_pileated$DatePonte, format="%Y" )
###Nouveau fichier avec seulement année
coordinates_pileated_v2<-subset(coordinates_pileated, select=-c(DatePonte))
View(coordinates_pileated)
View(coordinates_pileated_v2)
write_xlsx(coordinates_pileated_v2,"/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/coordinates_pileated.xlsx")
View(coordinates_pileated)
write_xlsx(coordinates_pileated_v2,"/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/coordinates_pileated_v2.xlsx")
#packages
install.packages('readxl')
library('tidyverse')
ls -l /Library/Frameworks/R.framework/Versions/
library('tidyverse')
ln -s
citation()
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX17FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
# Set main directory
directory <- "/Users/christophe_rouleau-desrochers/github/coringtreespotters/analyses/input/cores"
setwd(directory)
files <- list.files(pattern = "\\.csv$")
process_core <- function(f) {
df <- read.csv(f)
df$Year <- seq(2024, by = -1, length.out = nrow(df))
fname <- sub("\\.csv$", "", f)
parts <- strsplit(fname, "_")[[1]]
species <- parts[1]
code <- parts[2]
letter <- parts[3]
rep <- parts[4]
df$Species <- species
df$Code <- code
df$Letter <- letter
df$Rep <- rep
return(df)
}
# bind all files together
all_cores <- do.call(rbind, lapply(files, process_core))
# clean some names
all_cores$Code[which(all_cores$Code == "525-2069")] <- "525-2009"
all_cores$Code[which(all_cores$Code == "385-82")] <- "358-82"
all_cores$Code[which(all_cores$Code == "22-834")] <- "22834"
all_cores$id <- paste(all_cores$Species, all_cores$Code, all_cores$Letter, sep = "_")
all_cores$idrep <- paste(all_cores$Species, all_cores$Code, all_cores$Letter, all_cores$Rep, sep = "_")
# keep only the columns i want
all_cores2 <- all_cores[, c("X", "id", "idrep", "Species", "Code", "Letter", "Rep", "Year", "Length")]
# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
# Make some checks
# read og file
setwd("/Users/christophe_rouleau-desrochers/github/coringtreespotters/analyses/")
og <- read.csv("output/treesToCoredes.csv")
corescannotscan <- read.csv("input/cores/coresCannotScan/coresCannotScan.csv")
og$name <- gsub("\\*", "_",og$name)
og$name <- gsub("\\|", "_", og$name)
og$name <- gsub(" ", "", og$name)
og$name[grepl("6990", og$name)]
# temporary id col to fit these guys
all_cores$id2 <- paste(all_cores$Code, all_cores$Letter, all_cores$Species, sep = "_")
veccores <- unique(all_cores$id2)
og_vec <- og$name
setdiff(og_vec, veccores)
# <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
# convert inches to cm
all_cores2$lengthCM <- all_cores2$Length*2.54
all_cores2$scaled_length <- scale(all_cores2$lengthCM)
all_cores2$yearCor <- all_cores2$Year
#One of the cores is rotten outside, so Ill check if changing the ring dates may change something
all_cores2$yearCor[all_cores2$idrep == "CAOV_12907_G_II"] <-
all_cores2$year[all_cores2$idrep == "CAOV_12907_G_II"] - 5
# start by removing sepecies with litle replication **for now
coressub <- subset(all_cores2, !(Species %in% c("AEFL", "CAGL")))
# start with acsa
ACSA <- subset(all_cores2, Species == "ACSA")
# start by removing sepecies with litle replication **for now
coressub <- subset(all_cores2, !(Species %in% c("AEFL", "CAGL")))
ggplot(coressub, aes(x = X, y = lengthCM, color = id, group = idrep)) +
geom_line(linewidth = 0.6) +
labs(title = "Ring-width series per core",
x = "Year",
y = "Ring width (Length)",
color = "Core ID") +
facet_wrap(~id, nrow = 5, ncol = 1, scales = "free_y") +
theme_minimal(base_size = 14) +
scale_x_reverse(breaks=unique(caovG$X))+
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # tilt labels
)
library(ggplot2)
ggplot(coressub, aes(x = X, y = lengthCM, color = id, group = idrep)) +
geom_line(linewidth = 0.6) +
labs(title = "Ring-width series per core",
x = "Year",
y = "Ring width (Length)",
color = "Core ID") +
facet_wrap(~id, nrow = 5, ncol = 1, scales = "free_y") +
theme_minimal(base_size = 14) +
scale_x_reverse(breaks=unique(caovG$X))+
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # tilt labels
)
coressub
ggplot(coressub, aes(x = year, y = lengthCM, color = id, group = idrep)) +
geom_line(linewidth = 0.6) +
labs(title = "",
x = "Year",
y = "Ring width (Length)",
color = "Core ID") +
facet_wrap(~id, nrow = 5, ncol = 1, scales = "free_y") +
theme_minimal(base_size = 14) +
scale_x_reverse(breaks=unique(caovG$X))+
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # tilt labels
)
ggplot(coressub, aes(x = year, y = lengthCM, color = id, group = idrep)) +
geom_line(linewidth = 0.6) +
labs(title = "",
x = "Year",
y = "Ring width (Length)",
color = "Core ID") +
facet_wrap(~id, nrow = 5, ncol = 1, scales = "free_y") +
theme_minimal(base_size = 14) +
scale_x_reverse(breaks=unique(coressub$year))+
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # tilt labels
)
ggplot(coressub, aes(x = year, y = lengthCM, color = id, group = idrep)) +
geom_line(linewidth = 0.6) +
labs(title = "",
x = "Year",
y = "Ring width (Length)",
color = "Core ID") +
# facet_wrap(~id, nrow = 5, ncol = 1, scales = "free_y") +
theme_minimal(base_size = 14) +
scale_x_reverse(breaks=unique(coressub$year))+
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # tilt labels
)
ggplot(coressub, aes(x = Year, y = lengthCM, color = id, group = idrep)) +
geom_line(linewidth = 0.6) +
labs(title = "",
x = "Year",
y = "Ring width (Length)",
color = "Core ID") +
# facet_wrap(~id, nrow = 5, ncol = 1, scales = "free_y") +
theme_minimal(base_size = 14) +
# scale_x_reverse(breaks=unique(coressub$year))+
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # tilt labels
)
ggsave("figures/coreslineup.jpeg", width = 6, height = 8, units = "in", dpi = 300)
ggsave("figures/coreslineup.jpeg", width = 6, height = 12, units = "in", dpi = 300)
ggsave("figures/coreslineup.jpeg", width = 12, height = 6, units = "in", dpi = 300)
